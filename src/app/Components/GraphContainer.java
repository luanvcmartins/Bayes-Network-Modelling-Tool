/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package app.Components;

import app.Models.LineData;
import java.awt.BasicStroke;
import java.awt.Color;
import java.awt.Component;
import java.awt.Dimension;
import java.awt.Graphics;
import java.awt.Graphics2D;
import java.awt.RenderingHints;
import java.util.ArrayList;


public class GraphContainer extends javax.swing.JPanel {

    private final ArrayList<LineData> lines;

    /**
     * Creates new form GraphContainer
     */
    public GraphContainer() {
        initComponents();
        this.lines = new ArrayList<>();
    }

    @Override
    public void paint(Graphics grphcs) {
        super.paint(grphcs);

        if (lines == null) {
            return;
        }

        Graphics2D g2d = ((Graphics2D) grphcs);
        g2d.setRenderingHint(RenderingHints.KEY_ANTIALIASING,
                RenderingHints.VALUE_ANTIALIAS_ON);
        g2d.setStroke(new BasicStroke(3));
        for (LineData line : lines) {
            drawArrowLine(grphcs,
                    line.getStartX(),
                    line.getStartY(),
                    line.getEndX(),
                    line.getEndY(), 15, 10);
        }
    }

    public void addArrow(LineData r) {
        this.lines.add(r);
    }

    public void removeArrow(LineData r) {
        this.lines.remove(r);
    }

    public void removeArrow(JAttribute from, JAttribute to) {
        for (LineData line : lines) {
            if (line.getFrom() == from && line.getTo() == to) {
                lines.remove(line);
                return;
            }
        }
    }

    public ArrayList<LineData> getLines() {
        return lines;
    }

    @Override
    public Dimension getPreferredSize() {
        int x = Integer.MIN_VALUE, y = Integer.MIN_VALUE;

        for (Component child : getComponents()) {
            if (child instanceof JAttribute) {
                if (child.getLocation().x > x) {
                    x = child.getLocation().x;
                }
                if (child.getLocation().y > y) {
                    y = child.getLocation().y;
                }
            }
        }
        x += 200;
        y += 200;
        return new Dimension(x, y);
    }

    /**
     * Draw an arrow line between two points.
     *
     * @param g the graphics component.
     * @param x1 x-position of first point.
     * @param y1 y-position of first point.
     * @param x2 x-position of second point.
     * @param y2 y-position of second point.
     * @param d the width of the arrow.
     * @param h the height of the arrow.
     */
    private void drawArrowLine(Graphics g, int x1, int y1, int x2, int y2, int d, int h) {
        int dx = x2 - x1, dy = y2 - y1;
        double D = Math.sqrt(dx * dx + dy * dy);
        double xm = D - d, xn = xm, ym = h, yn = -h, x;
        double sin = dy / D, cos = dx / D;

        x = xm * cos - ym * sin + x1;
        ym = xm * sin + ym * cos + y1;
        xm = x;

        x = xn * cos - yn * sin + x1;
        yn = xn * sin + yn * cos + y1;
        xn = x;

        int[] xpoints = {x2, (int) xm, (int) xn};
        int[] ypoints = {y2, (int) ym, (int) yn};

        g.setColor(Color.BLACK);
        g.drawLine(x1, y1, x2, y2);
        g.setColor(Color.MAGENTA);
        g.fillPolygon(xpoints, ypoints, 3);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 400, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGap(0, 300, Short.MAX_VALUE)
        );
    }// </editor-fold>//GEN-END:initComponents

    public void clearArrows() {
        this.lines.clear();
        this.repaint();
    }


    // Variables declaration - do not modify//GEN-BEGIN:variables
    // End of variables declaration//GEN-END:variables
}
